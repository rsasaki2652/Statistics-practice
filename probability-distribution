import numpy as np
import pandas as pd
import seaborn as sns
from scipy import stats
import matplotlib.pyplot as plt
%matplotlib inline

#データの準備
df = sns.load_dataset('tips')
df['tip_rate'] = df['tip'] / df['total_bill']

#離散型確率変数
stats.randint(1, 7) #1~6のランダムな整数を生成
#連続型確率変数
stats.uniform(0, 1) #0~1のランダムな値を生成

#離散型確率変数の描画
x = np.arange(1, 7)
y = stats.randint(1, 7).pmf(x) #pmfは確率質量関数(Probability Mass Function)
plt.plot(x, y, "o") #"o"は点を表示させる
plt.vlines(x, 0, y) #0~yまで線を引く

#連続型確率変数の描画
x = np.linspace(-2, 2, 100)
y = stats.uniform(0, 1).pdf(x) #pdfは確率密度関数(Probability Density Function)
plt.plot(x, y)

#累積分布関数(CDF:Cumulative Distribution Function)の描画
x = np.linspace(-3, 3, 100)
y = stats.norm.cdf(x) #normは正規分布
plt.plot(x, y)
#右側の面積を求める
y = stats.norm.sf(x)
plt.plot(y)

#カーネル密度推定(Kernel Density Estimation)
x = np.linspace(-3, 10, 100)
y = stats.gaussian_kde([1, 1, 2, 2, 3, 4, 5]).pdf(x)
plt.plot(x, y)
#データフレームをdatasetとした場合
x = np.linspace(-3, 10, 100)
y = stats.gaussian_kde(df['tip']).pdf(x) #tipカラムのシリーズのデータのkde
plt.plot(x, y)
#ヒストグラムと一緒にkdeを描画
sns.displot(df['tip'], kde=True)
#kdeからデータをサンプルする
resample_data = stats.gaussian_kde(df['tip']).resample()

#標準化
from sklearn.preprocessing import StandardScaler #標準化するクラスのインポート
#StandardScaler()の使い方
scaler = StandardScaler()
scaler.fit_transform([[1], [2], [3], [4], [5]]) #二次元のデータを入れる必要があるため二重リストにする
#データフレームを標準化
scaled = scaler.fit_transform(df['tip_rate'].values.reshape(-1, 1)) #.values.reshape(-1, 1)でtip_rateカラムの中身を二重リスト化
#複数のカラムを標準化
scaled = scaler.fit_transform(df[['total_bill', 'tip_rate']])


